<apex:page showChat="false" 
  sidebar="false" 
  showHeader="false" 
  standardStylesheets="false" 
  docType="html-5.0" 
  applyHtmlTag="false" 
  applyBodyTag="false" 
  contentType="text/html"
  controller="RingCentralController">

<apex:outputText escape="false" value="{!"<!DOCTYPE html>"}"/>

<html class="no-js">
  <head>
    <base href="{!URLFOR($Resource.OpenCTIQAResource333,'dist/')}"></base>
    <meta charset="utf-8"></meta>
    <title>RC Open CTI</title>
    <meta name="description" content=""></meta>
    <meta name="viewport" content="width=device-width"></meta>

    <link rel="stylesheet" href="styles/c24966c3.main.css"/>
    <script>
        // bring back the original XMLHttpRequest after SF's apex override it
        if (typeof Sarissa !== "undefined" && Sarissa.originalXMLHttpRequest) {
            window.XMLHttpRequest = Sarissa.originalXMLHttpRequest;
        }

        function decode(str) {
            return decodeURIComponent(str.trim().replace(/\+/g, " "));
        }

        function convertPicklistOptions(picklistOptions) {
            var options = [];
            for(var i = 0; i < picklistOptions.length - 1; i += 2) {
                options.push({
                    value: picklistOptions[i],
                    label: picklistOptions[i + 1]
                });
            }
            return options;
        }

        var sfActivityLogSubjects = (function() {
            // this code is fetching the list of Activity Log subjects (using Apex class RingCentralController)
            var sfActivityLogSubjectsStr = "{!taskSubjectValues}";
            sfActivityLogSubjectsStr = sfActivityLogSubjectsStr.replace("[", "").replace("]", "");
            var sfActivityLogSubjectsArr = sfActivityLogSubjectsStr.split(",");
            var sfActivityLogSubjectsResult = [];
            for (var i = 0; i < sfActivityLogSubjectsArr.length; i++) {
                var subject = decode(sfActivityLogSubjectsArr[i]);

                if (sfActivityLogSubjectsResult.indexOf(subject) === -1) {
                    sfActivityLogSubjectsResult.push(subject);
                }
            }
            return sfActivityLogSubjectsResult;
        })();
        
        var lookupFields = [];
        var requiredFields = [];
        var sfCustomLogFields = [];
        
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.RingCentralController.getCustomLogFields}',
            function(fieldsObjs, event) {
                if (fieldsObjs && Array.isArray(fieldsObjs)) {
                    fieldsObjs.forEach(function(fieldObj) {
                        sfCustomLogFields.push({
                            type: fieldObj.fieldType,
                            label: fieldObj.fieldLabel,
                            value: fieldObj.fieldValue,
                            picklistOptions: convertPicklistOptions(fieldObj.picklistOptions),
                            referenceObjs: fieldObj.referenceObjs,
                            isRequired: fieldObj.isRequired
                        });
                        
                        if (fieldObj.fieldType === 'reference') {
                            lookupFields.push(fieldObj.fieldValue);    
                        }
                        
                        if (fieldObj.isRequired) {
                            requiredFields.push(fieldObj.fieldValue);
                        }
                    })
                }
                console.log('adminUI sfCustomLogFields:',sfCustomLogFields);
                console.log('adminUI lookupFields:', lookupFields);
                console.log('adminUI requiredFields:', requiredFields);
            },
            {escape: false}
        );

        var isAdminAutoSave = ("{!isAutoSave}" === "true" ? true : false);
        console.log("adminUI isAdminAutoSave: ", isAdminAutoSave);
    </script>

    <script>
        function sfReplaceInternalKeyWithCallId(activityRecord, call, done, fail) {
            if (typeof Visualforce === "undefined") {
                alert("DEVELOPER! Please install index.html as Visualforce page to make this feature work");
                return;
            }

            Visualforce.remoting.Manager.invokeAction(
               '{!$RemoteAction.RingCentralController.replaceInternalKeyWithCallId}',

               // String fromNo
               call.sessionId, // 2015/05/27 - Changed .fromNumber to .sessionId, because the fromNumber field does not always exist
               // String toNo
               call.toNumber,
               // String callId
               call.id,

               function (result, event) {
                   if (result !== null) {
                       done(result);
                   } else {
                       fail(event);
                   }
               },

               {escape: false}
           );
        }

        function Task() {}

        function normalizeDate(mydate){
            mydate = new Date(mydate );
            mydate = new Date(mydate - mydate.getTimezoneOffset() * 60000);
            return mydate;
        }

        function sfSaveLog(activityRecord, call, done, fail) {
            if (typeof Visualforce === "undefined") {
                alert("DEVELOPER! Please install index.html as Visualforce page to make this feature work");
                done (new Error('Please install index.html as Visualforce page to make this feature work'));
                return;
            }

            var callDuration = call.duration;

            // When saving a call log for an active call just dont put duration to the activity record
            if (callDuration === -1) {
                callDuration = null;
            }

            var internalKey = call.getInternalKey();
            var task = new Task();
            
            task.callobject = internalKey;
            task.calltype = call.direction;
            task.calldisposition = call.result;
            task.calldurationinseconds = callDuration;
            task.status = 'Completed';
        
            sfCustomLogFields.forEach(function(sfCustomLogField) {
                var logFieldVal = sfCustomLogField && sfCustomLogField.value;
                if (lookupFields.indexOf(logFieldVal) !== -1) {
                    task[logFieldVal] = (activityRecord[logFieldVal] && activityRecord[logFieldVal].Id) || null;
                } else {
                    if (sfCustomLogField && sfCustomLogField.type.toLowerCase() === 'date' && activityRecord[logFieldVal]) {
                        task[logFieldVal] = normalizeDate(activityRecord[logFieldVal]).getTime();
                    } else {
                        task[logFieldVal] = activityRecord[logFieldVal];
                    }
                }
            });        

            if (!task.activitydate) {
                task.activitydate = normalizeDate(new Date().toISOString()).getTime();
            }
            
            window.console.log('adminUI open CTI virsualforce task:', task);
            Visualforce.remoting.Manager.invokeAction(
               '{!$RemoteAction.RingCentralController.upsertCustomTask}',
               task,             
               internalKey,

               function (result, event) {
                   if (result !== null) {
                       done(result);
                   } else {
                       fail(event);
                   }
               },

               {escape: false}
           );
        }

        function sfSaveCredentials(phone, extension, password, rememberMe, done, fail) {
            if (typeof Visualforce === "undefined") {
                alert("DEVELOPER! Please install index.html as Visualforce page to make this feature work");
                fail();
                return;
            }

            var credentials = phone + ":" + extension + ":" + password + ":" + (rememberMe ? "1" : "0");

            Visualforce.remoting.Manager.invokeAction(
               '{!$RemoteAction.RingCentralController.encrypt}',

               credentials,

               function (result, event) {
                   if (result !== null) {
                       done(result);
                   } else {
                       fail(event);
                   }
               },

               {escape: false}
           );
        }

        function sfLoadCredentials(encryptedCredentials, done, fail) {
            if (typeof Visualforce === "undefined") {
                alert("DEVELOPER! Please install index.html as Visualforce page to make this feature work");
                fail();
                return;
            }

            Visualforce.remoting.Manager.invokeAction(
               '{!$RemoteAction.RingCentralController.decrypt}',

               encryptedCredentials,

               function (result, event) {
                   if (result !== null) {
                       var a = result.match(/^([^:]+):([^:]*):(.+):([01])$/);
                       if (!a) {
                           fail("Can't parse credentials: " + result);
                       } else {
                           done([a[1], a[2], a[3], a[4] === "1"]);
                       }
                   } else {
                       fail(event);
                   }
               },

               {escape: false}
           );
        }    
     </script>

  </head>
  <body ng-app="openCtiApp" class="rc-brand-{{ brand | lowercase}}">
    <div class="ngView" id="mainBody"></div>

    <div class="notification-container" ng-style="{display: 'block'}" style="display: none">
      <div class="notification" ng-show="showNotification">
        {{ notification }}
      </div>
    </div>

    <script src="scripts/f8fe11f8.vendor.js"></script>
    <script src="scripts/82304e39.scripts.js"></script>
  </body>
</html>
</apex:page>